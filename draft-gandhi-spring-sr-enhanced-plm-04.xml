<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC0768 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC4656 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4656.xml">
<!ENTITY RFC5357 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5357.xml">
<!ENTITY RFC8174 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC2104 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2104.xml">
<!ENTITY RFC2113 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2113.xml">
<!ENTITY RFC4868 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4868.xml">
<!ENTITY RFC7880 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7880.xml">
<!ENTITY RFC6038 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6038.xml">
<!ENTITY RFC6437 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6437.xml">
<!ENTITY RFC6936 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6936.xml">
<!ENTITY RFC7506 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7506.xml">
<!ENTITY RFC7820 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7820.xml">
<!ENTITY RFC8029 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8029.xml">
<!ENTITY RFC8186 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8186.xml">
<!ENTITY RFC8321 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8321.xml">
<!ENTITY RFC8402 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8402.xml">
<!ENTITY RFC8754 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8754.xml">
<!ENTITY RFC8762 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8762.xml">
<!ENTITY RFC8972 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8972.xml">
<!ENTITY I-D.ietf-spring-segment-routing-policy SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-spring-segment-routing-policy.xml">
<!ENTITY I-D.ietf-spring-mpls-path-segment SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-spring-mpls-path-segment.xml">
<!ENTITY I-D.ietf-pce-binding-label-sid SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-pce-binding-label-sid.xml">
<!ENTITY I-D.ietf-pce-sr-bidir-path SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-pce-sr-bidir-path.xml">
<!ENTITY I-D.gandhi-spring-stamp-srpm SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml3/reference.I-D.gandhi-spring-stamp-srpm.xml">
<!ENTITY I-D.gandhi-ippm-stamp-srpm SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml3/reference.I-D.gandhi-ippm-stamp-srpm.xml">
<!ENTITY I-D.ietf-spring-srv6-network-programming SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-spring-srv6-network-programming.xml">
<!ENTITY I-D.ietf-mpls-spl-terminology SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-mpls-spl-terminology.xml">
]>
<rfc category="std" docName="draft-gandhi-spring-sr-enhanced-plm-04"
     ipr="trust200902" submissionType="IETF">
  <!-- Generated by id2xml 1.5.0 on 2020-02-06T01:41:26Z -->

  <?rfc compact="yes"?>

  <?rfc text-list-symbols="oo*+-"?>

  <?rfc subcompact="no"?>

  <?rfc sortrefs="no"?>

  <?rfc symrefs="yes"?>

  <?rfc strict="yes"?>

  <?rfc toc="yes"?>

  <front>
    <title abbrev="Performance and Liveness Monitoring in SR">
    Enhanced Performance Delay and Liveness Monitoring in Segment Routing Networks</title>

    <author fullname="Rakesh Gandhi" initials="R." role="editor"
            surname="Gandhi">
      <organization>Cisco Systems, Inc.</organization>

      <address>
        <postal>
          <street>Canada</street>
        </postal>

        <email>rgandhi@cisco.com</email>
      </address>
    </author>

    <author fullname="Clarence Filsfils" initials="C." surname="Filsfils">
      <organization>Cisco Systems, Inc.</organization>

      <address>
        <email>cfilsfil@cisco.com</email>
      </address>
    </author>

    <author fullname="Navin Vaghamshi" initials="N." surname="Vaghamshi">
      <organization>Reliance</organization>

      <address>
        <email>Navin.Vaghamshi@ril.com</email>
      </address>
    </author>

    <author fullname="Moses Nagarajah" initials="M." surname="Nagarajah">
      <organization>Telstra</organization>

      <address>
        <email>Moses.Nagarajah@team.telstra.com</email>
      </address>
    </author>

    <author fullname="Richard Foote" initials="R." surname="Foote">
      <organization>Nokia</organization>

      <address>
        <email>footer.foote@nokia.com</email>
      </address>
    </author>

    <date day="01" month="February" year="2021"/>

    <workgroup>SPRING Working Group</workgroup>

    <abstract>
      <t>Segment Routing (SR) leverages the source routing paradigm. SR is
      applicable to both Multiprotocol Label Switching (SR-MPLS) and IPv6
      (SRv6) data planes. This document defines procedure for 
      Enhanced Performance Delay and Liveness Monitoring (PDLM) in Segment Routing networks.
      The procedure leverages the test packets defined in RFC 8762 (Simple 
      Two-Way Active Measurement Protocol (STAMP)) and is applicable to  
      end-to-end SR Paths including 
      SR Policies for both SR-MPLS and SRv6 data planes.</t>
    </abstract>
  </front>

  <middle>
    <section anchor="sect-1" title="Introduction">
      <t>Segment Routing (SR) leverages the source routing paradigm and
      greatly simplifies network operations for Software Defined Networks
      (SDNs). SR is applicable to both Multiprotocol Label Switching (SR-MPLS)
      and IPv6 (SRv6) data planes <xref target="RFC8402"/>. SR takes advantage
      of the Equal-Cost Multipaths (ECMPs) between source and transit nodes,
      between transit nodes and between transit and destination nodes. SR
      Policies as defined in <xref format="default"
      target="I-D.ietf-spring-segment-routing-policy"/> are used to steer
      traffic through a specific, user-defined paths using a stack of
      Segments. Built-in Performance Delay Measurement (DM) as well as 
      Liveness Monitoring for Connectivity Verification (CV) and 
      Continuity Check (CC) are essential requirements to
      provide Service Level Agreements (SLAs) in SR networks.</t>

      <t>The Simple Two-way Active Measurement Protocol (STAMP) provides
      capabilities for the measurement of various performance
      metrics in IP networks <xref target="RFC8762"/>. 
      It eliminates the need for control protocol by using
      configuration and management model to provision and manage test sessions. 
      <xref target="RFC8972"/> defines optional extensions for STAMP.
      <xref target="I-D.gandhi-ippm-stamp-srpm"/> defines STAMP extensions for SR networks.</t>

      <t> The <xref target="I-D.gandhi-spring-stamp-srpm"/> defines procedures for 
      performance measurement
      using STAMP test packets in SR networks. The procedure for one-way and two-way delay measurement modes 
      can also be applied to liveness monitoring of SR Paths. 
      However, it limits the scale for number of STAMP sessions and fault detection interval
      since the STAMP test packets need to be punted from the forwarding path
      (to slow path or control plane) and reply test packets need to be injected.</t>

      <t>For Liveness Monitoring, Seamless Bidirectional Forwarding Detection (S-BFD)
      <xref target="RFC7880"/> can be used in Segment Routing networks.
      However, S-BFD requires protocol support on the Session-Reflector to process
      the S-BFD packets as packets need to be punted from the forwarding path in order to
      send the reply thereby limiting the scale for number of PM sessions and fault
      detection interval. In addition, S-BFD protocol does not have the
      capability today to enable performance delay monitoring in SR
      networks. Enabling multiple protocols in SR networks, S-BFD for liveness
      monitoring and STAMP for performance delay monitoring increases
      the deployment and operational complexities in SR networks.</t>

      <t>This document defines procedure for 
      Enhanced Performance Delay and Liveness Monitoring (PDLM) in Segment Routing networks.
      The procedure leverages the test packet formats defined in RFC 8762 (Simple 
      Two-Way Active Measurement Protocol (STAMP)) and is applicable to  
      end-to-end SR Paths including SR Policies for both SR-MPLS and SRv6 data planes.</t>
    </section>

    <section anchor="sect-2" title="Conventions Used in This Document">
      <section anchor="sect-2.1" title="Requirements Language">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
        document are to be interpreted as described in <xref
        target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
        appear in all capitals, as shown here.</t>
      </section>

      <section anchor="sect-2.2" title="Abbreviations">
        <t>BFD: Bidirectional Forwarding Detection.</t>

        <t>BSID: Binding Segment ID.</t>

        <t>DM: Delay Measurement.</t>

        <t>ECMP: Equal Cost Multi-Path.</t>

        <t>LM: Loss Measurement.</t>

        <t>MPLS: Multiprotocol Label Switching.</t>

        <t>PDLM: Performance Delay and Liveness Monitoring.</t>

        <t>PM: Performance Measurement.</t>

        <t>PTP: Precision Time Protocol.</t>

        <t>SID: Segment ID.</t>

        <t>SL: Segment List.</t>

        <t>SR: Segment Routing.</t>

        <t>SRH: Segment Routing Header.</t>

        <t>SR-MPLS: Segment Routing with MPLS data plane.</t>

        <t>SRv6: Segment Routing with IPv6 data plane.</t>

        <t>STAMP: Simple Two-way Active Measurement Protocol.</t>

      </section>

   <section title="Reference Topology" anchor="sect-2.3"><t>
   In the reference topology shown below, the Session-Sender R1 initiates a
   PDLM test packet and the Session-Reflector R3
   transmits a reply test packet.  The reply test packet is 
   transmitted back to the Session-Sender R1 
   on the same path or a different path in the reverse direction.</t>  

   <t>SR is enabled on nodes R1 and R3. The nodes R1 and R3 are
   connected via an SR path <xref target="RFC8402"/>.  
   The SR path may be an SR Policy <xref target="I-D.ietf-spring-segment-routing-policy"/> 
   on node R1 (called head-end) with destination to node R3 (called tail-end).</t>

   <figure><artwork><![CDATA[
                       T1 
                      / 
             +-------+   PDLM Test Packet  +-------+
             |       | - - - - - - - - - - |       |
             |   R1  |====================||   R3  |
             |       |<- - - - - - - - - - |       |
             +-------+  Return Test Packet +-------+
                      \  
                       T4 

            Session-Sender               Session-Reflector
                                         (Simply Forward)

                       Reference Topology
]]></artwork>
    </figure>
    </section>
    </section>

 
  <section anchor="sect-3" title="Overview">
    <section title="Loopback Mode" anchor="sect-3.1"><t>
    In loopback mode, the Session-Sender R1 initiates PDLM test packets and the Session-Reflector R3
    forwards them just like data packets for the normal traffic back to the Session-Sender R1. 
    The PDLM test packets are not punted at the Session-Reflector
    and it does not process them and generate reply test packets.
    The Session-Reflector must not drop the loopback PDLM test packets, 
    for example, due to a local policy provisioned on the node. 
    No PM session is created on the Session-Reflector.</t>

    <t>The Source and Destination IP addresses in the PDLM test packets are set to the Session-Reflector 
    and the Session-Sender addresses, respectively (representing the reverse path).
    Both Source and Destination UDP ports in the PDLM test packets are allocated dynamically or user-configured  
    from the range specified in <xref target="RFC8762"/>.  
    The UDP ports used in loopback mode are different than the ports
    used for STAMP sessions.
    The IPv4 Time To Live (TTL) and IPv6 Hop Limit (HL) are set to 255.</t>

     </section>

      <section anchor="sect-3.2"
               title="Loopback Mode Enabled with Network Programming Function"
               toc="default">
      <t>In "loopback mode enabled with network programming function",
      both transmit (T1) and receive (T2) timestamps in data plane are collected
      by the PDLM test packets transmitted in loopback mode as shown in Figure 2.
      The network programming function optimizes the "operations of punt 
      and inject the PDLM test packet" on the Session-Reflector 
      node as timestamping is implemented in hardware. This helps to achieve higher scale
      and faster rate, resulting in faster failure detection.</t>

      <figure align="center"
              anchor="ure-loopback-mode-enabled-with-network-programming"
              title="Loopback Mode Enabled with Network Programming Function">
       <artwork>
                         T1                  T2
                        /                     \
               +-------+    PDLM  Test Packet  +-------+
               |       | - - - - - - - - - - - |       |
               |   R1  |======================||  R3   |
               |       |&lt;- - - - - - - - - - - |       |
               +-------+   Return Test Packet  +-------+
                        \  
                         T4 

             Session-Sender                 Session-Reflector
                                             (Timestamp, 
                                              Pop and Forward)
      </artwork>
      </figure>
   
      <t>The Session-Sender adds transmit (T1)
      timestamp in the payload of the PDLM test packet and clears the receive (T2) timestamp. 
      The Session-Reflector adds the receive timestamp in the 
      payload of the received PDLM test 
      packet in hardware without punting the packet to slow-path (or control-plane). The Session-Reflector only
      adds the receive timestamp if the source or destination address in the PDLM test packet matches
      the local node address to ensure that the PDLM test packet reaches the 
      intended Session-Reflector and the receive timestamp is returned by the that node.
      The payload of the PDLM test packet is not modified by any intermediate nodes.</t>

      <t>The network programming function enables the node to add receive timestamp
      in the payload of the PDLM test packet at a specific offset which is locally
      provisioned consistently in the network. 
      In the PDLM test packet defined in Figure 3,
      the 64-bit receive timestamp is added at byte-offset 16 which is 
      from the start of the payload.</t>

      </section>

    <section title="Example Provisioning Model" anchor="sect-3.3"><t>
    An example provisioning model and typical measurement parameters are shown in Figure 2:</t>
 
    <figure title="Example Provisioning Model" anchor="ure-example-provisioning-model"><artwork><![CDATA[

                            +------------+
                            | Controller |
                            +------------+
  PDLM Mode                     /    \      Timestamp Label/SRV6 EP
    LB or Enhanced Mode        /      \       Timestamp2 Offset
  Source/Dest UDP Ports       /        \      Timestamp Format
  Missed Test Packet Count   /          \
  Timestamp Label/SRv6 EP   /            \
    Timestamp Format       /              \
  Delay Threshold/Count   /                \
                         /                  \
                        v                    v
                    +-------+            +-------+
                    |       |            |       |
                    |   R1  |============|   R3  |
                    |       |            |       |
                    +-------+            +-------+

                  Session-Sender     Session-Reflector
]]></artwork>
    </figure>

    <t>Example of Timestamp Format is 64-bit PTPv2 <xref target="IEEE1588"/> and NTP.</t>
    
    <t>The mechanisms to provision the
    Session-Sender and Session-Reflectors are outside the scope of this document.</t>

     </section>
    </section>

    <section title="Test Packet Formats" anchor="sect-4"><t>
    The PDLM test packets compatible with the STAMP test packet formats defined in 
    <xref target="RFC8762"/> are specified in Figure 3.
    </t>

   <figure title="Test Packet Formats" anchor="ure-test-packet-format"><artwork><![CDATA[
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |                     Sequence Number                           |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |                     Transmit Timestamp (T1)                   |
  |                                                               |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |  Transmit Error Estimate      |  SSID                         |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |                     Receive Timestamp (T2)                    |
  |                                                               |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |  Receive Error Estimate       |  MBZ                          |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |                                                               |
  |                     MBZ (28 Octets)                           |
  |                                                               |
  |                                                               |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
 
                STAMP Compatible Test Packet Format
]]></artwork>
    </figure>


   <t>Sequence Number is the sequence number of the PDLM test packet according
   to its transmit order.  It starts with zero and is incremented by one
   for each subsequent test packet.</t>

   <t>Transmit Timestamp and Transmit Error Estimate are the Session-Sender's transmit
   timestamp and error estimate for the PDLM test packet,
   respectively.  Similarly, Receive Timestamp and Receive Error Estimate are 
   the Session-Reflector's receive timestamp and error estimate, respectively. 
   The timestamp and error estimate fields
   follow the definition and formats defined in Section 4.1.2 in
   [RFC8762].  Timestamp format preferred is 64-bit PTPv2 <xref target="IEEE1588"/> as
   specified in <xref target="RFC8186"/>, implemented in hardware.</t> 

    </section>


    <section anchor="sect-5" title="Performance Delay and Liveness Monitoring">
     <t>For performance delay and liveness monitoring of an end-to-end SR Path including SR Policy, 
     PDLM test packets in loopback mode is used.  
     </t>
 
     <t>For SR Policy, the PDLM test packets are transmitted using the Segment List (SL) of the Candidate-path 
     <xref target="I-D.ietf-spring-segment-routing-policy"/>.
     When a Candidate-path has more than one Segment Lists, multiple
     PDLM test packets are sent, one using each Segment List. The return test packets are received by
     the Session-Sender via IP/UDP <xref target="RFC0768"/> return path by default. 
     The Segment List of the return SR path can be added in the PDLM test packet header
     to receive the return test packet on a specific path using the Binding SID 
     <xref target="I-D.ietf-pce-binding-label-sid"/> or Segment List of the Reverse SR Policy <xref
     target="I-D.ietf-pce-sr-bidir-path"/>.</t>

    <section anchor="sect-5.1" title="Test Packet for SR-MPLS">
     <t>The PDLM test packets are 
     transmitted using the MPLS header containing the label stack of the SR
     Policy as shown in Figure 4. In case of IP/UDP
     return path, the MPLS header is removed by the Session-Reflector.
     The label stack can contain a reverse SR-MPLS 
     path to receive the return test packet on a specific path. 
     In this case, the MPLS header will not be removed
     by the Session-Reflector.</t>

        <figure anchor="ure-test-packet-header-for-sr-mpls"
                title="Example Test Packet for SR-MPLS">
        <artwork>  
  0                   1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |            Label(1)                   | TC  |S|      TTL      |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  .                                                               .
  .                                                               .
  .                                                               .
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |            Label(n)                   | TC  |S|      TTL      |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  | IP Header                                                     |
  .  Source IP Address = Session-Reflector IPv4 or IPv6 Address   .
  .  Destination IP Address = Session-Sender IPv4 or IPv6 Address .
  .  Protocol = UDP                                               .
  .                                                               .
  +---------------------------------------------------------------+
  | UDP Header                                                    |
  .  Source Port = As chosen by Session-Sender                    .
  .  Destination Port = As chosen by Session-Sender               .
  .                                                               .
  +---------------------------------------------------------------+
  |  Payload as defined in Figure 3                               |
  .                                                               .
  +---------------------------------------------------------------+
    </artwork>
        </figure>
      </section>

   <section anchor="sect-5.2" title="Test Packet for SRv6">
    <t>The PDLM test packets for SRv6 data plane are transmitted using the 
    Segment Routing Header (SRH) <xref target="RFC8754"/> containing 
    the Segment List of the SR Policy as shown in Figure 5. In case of IP/UDP
    return path, the SRH is removed by the Session-Reflector.
    The Segment List can contain a reverse SRv6 path to receive 
    the return test packet on a specific path. In this case, the 
    SRH will not be removed by the Session-Reflector.
    When the return test packet contains an SRH at the Session-Sender,
    the procedure defined for upper-layer header processing for SRv6 SIDs
    in [I-D.ietf-spring-srv6-network-programming] is used to process the
    UDP header in the received PDLM test packets.</t>

        <figure anchor="ure-test-packet-header-for-srv6"
                title="Example Test Packet for SRv6">
          <artwork>  
  +---------------------------------------------------------------+
  | IP Header                                                     |
  .  Source IP Address = Session-Sender IPv6 Address              .
  .  Destination IP Address = Destination IPv6 Address            .
  .                                                               .
  +---------------------------------------------------------------+
  | SRH as specified in RFC 8754                                  |
  .     &lt;Segment List&gt;                                            .
  .                                                               .
  +---------------------------------------------------------------+
  | IP Header                                                     |
  .  Source IP Address = Session-Reflector IPv6 Address           .
  .  Destination IP Address = Session-Sender IPv6 Address         .
  .                                                               .
  +---------------------------------------------------------------+
  | UDP Header                                                    |
  .  Source Port = As chosen by Session-Sender                    .
  .  Destination Port = As chosen by Session-Sender               .
  .                                                               .
  +---------------------------------------------------------------+
  |  Payload as defined in Figure 3                               |
  .                                                               .
  +---------------------------------------------------------------+
      </artwork>
        </figure>
      </section>
    </section>

    <section anchor="sect-6"
             title="Enhanced Performance Delay and Liveness Monitoring">
      <t>The enhanced performance delay and liveness monitoring of an end-to-end SR Path including SR Policy is
      defined using the PDLM test packets in "loopback mode enabled with network programming function".</t>

      <section anchor="sect-6.1"
               title="Test Packet with Timestamp Label for SR-MPLS"
               toc="default">
      <t>In this document, new Timestamp Label 
      (Extended Special-Purpose value TBD1) is defined for SR-MPLS data plane to enable network programming
      function for "timestamp, pop and forward" the received packet.</t>

      <t>In the PDLM test packet for SR-MPLS,
      Timestamp Label is added in the MPLS header as shown in Figure 6, to
      collect "Receive Timestamp" field in the payload of the PDLM test packet. 
      The label stack for the reverse SR-MPLS path can be added after the Timestamp 
      Label to receive the return test packet on a specific path.
      When a node receives a packet with
      Timestamp Label, after timestamping the packet at a specific offset, 
      the node pops the Timestamp Label and forwards the
      packet using the next label or IP header in the packet (just like the 
      data packets for the normal traffic).</t>

        <figure anchor="ure-test-packet-header-for-sr-mpls-with-timestamp-label"
                title="Example Test Packet with Timestamp Label for SR-MPLS">
          <artwork>
  0                   1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |            Label(1)                   | TC  |S|      TTL      |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  .                                                               .
  .                                                               .
  .                                                               .
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |            Label(n)                   | TC  |S|      TTL      |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |            Extension Label (15)       | TC  |S|      TTL      |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |            Timestamp Label (TBA1)     | TC  |S|      TTL      |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  | IP Header                                                     |
  .  Source IP Address = Session-Reflector IPv4 or IPv6 Address   .
  .  Destination IP Address = Session-Sender IPv4 or IPv6 Address .
  .  Protocol = UDP                                               .
  .                                                               .
  +---------------------------------------------------------------+
  | UDP Header                                                    |
  .  Source Port = As chosen by Session-Sender                    .
  .  Destination Port = As chosen by Session-Sender               .
  .                                                               .
  +---------------------------------------------------------------+
  |  Payload as defined in Figure 3                               |
  .                                                               .
  +---------------------------------------------------------------+</artwork>
        </figure>


    <section title="Timestamp Label Allocation" anchor="sect-6.1.1" toc="default"><t>
      Timestamp Label can be allocated using one of the following
      methods:</t>

    <t><list style="symbols"><t>Label (value TBA1) assigned by IANA from the "Extended
      Special-Purpose MPLS Values" <xref target="I-D.ietf-mpls-spl-terminology"/>. 
      The timestamp offset is fixed at byte-offset 16 from the start of the payload and timestamp format is 64-bit PTPv2 for this label.</t>

    <t>Label allocated by a Controller from the global table of the
      egress node.  The Controller provisions the label on both
      ingress and egress nodes, as well as timestamp offset and timestamp format.</t>

    <t>Label allocated by the egress node. The signaling and IGP flooding
      extension for the label (including timestamp offset and timestamp format) 
      are outside the scope of this document.</t>

    </list>
    </t>

    </section>

      <section anchor="sect-6.1.2"
               title="Node Capability for Timestamp Label"
           toc="default">
      <t>The ingress node needs 
      to know if the egress node can process the Timestamp Label to avoid dropping PDLM test packets. 
      The signaling extension 
      for this capability exchange is outside the scope of this document.</t>

      </section>

      </section>

      <section anchor="sect-6.2"
               title="Test Packet with Timestamp Endpoint Function for SRv6">
      <t>In this document, Timestamp Endpoint function for "Timestamp and Forward
      (TSF)" (SRv6 Endpoint Behaviour value TBD2) is defined for Segment Routing Header (SRH) <xref
      target="RFC8754"/> for SRv6 data plane to enable
      network programming function to "timestamp and forward" the received
      packet.</t>

      <t>In the PDLM test packet for SRv6,
      End.TSF function is added for the target Segment Identifier (SID) in SRH 
      <xref target="RFC8754"/> as shown in Figure 7,
      to collect "Receive Timestamp" field in the payload of the PDLM test packet. 
      The Segment List for the reverse path can be added after the target SID 
      to receive the return test packet on a specific path.
      When a Session-Reflector receives a packet with
      End.TSF function for the target SID which is local, 
      after timestamping the packet at a specific offset,
      the node forwards the packet using the next SID or IP header in the packet 
      (just like the data packets for the normal traffic).</t>

        <figure anchor="ure-test-packet-header-for-srv6-with-endpoint-function"
                title="Example Test Packet with Endpoint Function for SRv6">
          <artwork>
  +---------------------------------------------------------------+
  | IP Header                                                     |
  .  Source IP Address = Session-Sender IPv6 Address              .
  .  Destination IP Address = Destination IPv6 Address            .
  .                                                               .
  +---------------------------------------------------------------+
  | SRH as specified in RFC 8754                                  |
  .     &lt;Segment List&gt;                                            .
  .     SRv6 Endpoint End.TSF (value TBA2)                        .
  .                                                               .
  +---------------------------------------------------------------+
  | IP Header                                                     |
  .  Source IP Address = Session-Reflector IPv6 Address           .
  .  Destination IP Address = Session-Sender IPv6 Address         .
  .                                                               .
  +---------------------------------------------------------------+
  | UDP Header                                                    |
  .  Source Port = As chosen by Session-Sender                    .
  .  Destination Port = As chosen by Session-Sender               .
  .                                                               .
  +---------------------------------------------------------------+
  |  Payload as defined in Figure 3                               |
  .                                                               .
  +---------------------------------------------------------------+
  </artwork>
 </figure>


    <section title="Timestamp Endpoint Function Assignment" anchor="sect-6.2.1" toc="default"><t>
      Timestamp endpoint function for "Timestamp and Forward" can be signaled using one of the following methods:</t>

    <t><list style="symbols"><t>Timestamp endpoint function (value TBA2) assigned by IANA from the "SRv6 Endpoint Behaviors Registry".
      The timestamp offset is fixed at byte-offset 16 from the start of the payload and timestamp format is 64-bit PTPv2 for this endpoint function.</t>

    <t>Timestamp endpoint function assigned by a Controller.  The Controller provisions the value on both
      ingress and egress nodes, as well as timestamp offset and timestamp format.</t>

    <t>Timestamp endpoint function assigned by the egress node. The signaling and IGP flooding
      extension for the endpoint function (including timestamp offset and timestamp format) 
      are outside the scope of this document.</t>

    </list>
    </t>
      </section>

      <section anchor="sect-6.2.2"
               title="Node Capability for Timestamp Endpoint Function"
           toc="default">
      <t>The ingress node needs 
      to know if the egress node can process the Timestamp Endpoint Function to enable the monitoring. 
      The signaling extension 
      for this capability exchange is outside the scope of this document.</t>
      </section>

    </section>
   </section>

   <section anchor="sect-7" title="Failure Notification" toc="default">
     <t>Liveness success for SR Path is initially notified as soon as one or more 
      return test packets are received at the Session-Sender.</t>

      <t>Liveness failure for SR Path is notified when consecutive N number of return test
      packets are not received at the Session-Sender, where N (Missed Test Packet Count) is locally
      provisioned value. Similarly, delay metrics are notified as an example when consecutive 
      M number of PDLM test packets have measured delay values exceed user-configured 
      thresholds (absolute and percentage), where M is also locally provisioned value.</t>

      <t>For the PDLM test packets generated by the Session-Sender R1 in the 
      loopback mode, a failure on the reverse direction path can also cause 
      the return test packets to not reach the Session-Sender.
      This is also true in case of the reply test packets generated by the Session-Reflector R3 
      e.g. to indicate node R1 of any failure on the forward direction path. As such, the test-based methods 
      have this limitation for the liveness monitoring of the forward direction path.</t> 

      <t>In loopback mode, the timestamps T1 and t4 are used to measure round-trip delay.
      In loopback mode enabled with network programming function, the timestamps T1 and T2 are used
      to measure one-way delay.</t>

   </section>


   <section anchor="sect-8" title="Security Considerations" toc="default">
      <t>The Performance Delay and Liveness Monitoring is intended for deployment in
      the well-managed private and service provider networks. As such, it assumes
      that a node involved in a monitoring operation has previously verified
      the integrity of the path and the identity of the Session-Reflector
      node. If desired, attacks can be mitigated by performing basic
      validation and sanity checks, at the Session-Sender, of the timestamp
      fields in received PDLM packets. The minimal state
      associated with these protocols also limits the extent of disruption
      that can be caused by a corrupt or invalid packet to a single
      test cycle. Cryptographic
      measures may be used by the correct configuration of access-control
      lists and firewalls.</t>
   </section>

   <section anchor="sect-9" title="IANA Considerations" toc="default">
      <t>IANA maintains the "Special-Purpose Multiprotocol Label Switching
      (MPLS) Label Values" registry (see
      &lt;https://www.iana.org/assignments/mpls-label-values/mpls-label-values.xml&gt;).
      IANA is requested to allocate Timestamp Label value from the "Extended
      Special-Purpose MPLS Label Values" registry:</t>

      <figure>
        <artwork>
  +-------------+---------------------------------+---------------+
  | Value       | Description                     | Reference     |
  +-------------+---------------------------------+---------------+
  | TBA1        | Timestamp Label                 | This document |
  +-------------+---------------------------------+---------------+
      </artwork>
      </figure>

      <t>IANA is requested to allocate, within the "SRv6 Endpoint Behaviors
      Registry" sub-registry belonging to the top-level "Segment Routing 
      Parameters" registry <xref
      target="I-D.ietf-spring-srv6-network-programming"/>, the following
      allocation:</t>

      <figure>
        <artwork>     
  +-------------+---------------------------------+---------------+
  | Value       | Endpoint Behavior               | Reference     |
  +-------------+---------------------------------+---------------+
  | TBA2        | End.TSF (Timestamp and Forward) | This document |
  +-------------+---------------------------------+---------------+</artwork>
      </figure>
   </section>
  </middle>

  <back>
    <references title="Normative References">
      &RFC0768;
      &RFC2119;
      &RFC8174;
      &RFC8762;
    </references>

    <references title="Informative References">
      <reference anchor="IEEE1588">
        <front>
          <title>1588-2008 IEEE Standard for a Precision Clock Synchronization
          Protocol for Networked Measurement and Control Systems</title>

          <author>
            <organization>IEEE</organization>
          </author>

          <date month="March" year="2008"/>
        </front>
      </reference>

      &RFC7880;
      &RFC8186;
      &RFC8402;
      &RFC8754;
      &RFC8972;
      &I-D.gandhi-spring-stamp-srpm;
      &I-D.gandhi-ippm-stamp-srpm;
      &I-D.ietf-spring-segment-routing-policy;
      &I-D.ietf-spring-srv6-network-programming;
      &I-D.ietf-mpls-spl-terminology;
      &I-D.ietf-pce-binding-label-sid;
      &I-D.ietf-pce-sr-bidir-path;
    </references>


   <section title="Acknowledgments" numbered="no" anchor="acknowledgments"><t>
   The authors would like to thank Greg Mirsky, Mach Chen, Kireeti Kompella, and Adrian Farrel for providing
   the review comments.</t>
    </section>

  </back>
</rfc>
